<#
/*
   * AssemblyFileVersion.tt
   * 1.2.0.0
*/

/* This file is licensed under the Do What the F* You Want to Public License ( http://www.wtfpl.net )
    * by zer0Kerbal
    *
    * You are allowed to copy, modify and use this file unrestrictedly. :)
    */
#>

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#

	// Instructions
	// 1.  Add a new Text Template to the project
	// 2.  Copy this file into the new template
	// 3.  Update the string: versionfile with the complete path to the .version file
	// 4.  Remove the following line from the file AssemblyInfo.cs (usually located in the "Property" folder inside your C# project):
	//        [assembly: AssemblyVersion("1.0.0.0")]
	// 5.  Add the following to the PreBuild steps:
	//		set textTemplatingPath="%CommonProgramFiles(x86)%\Microsoft Shared\TextTemplating\$(VisualStudioVersion)\texttransform.exe"
	//
	//		if %textTemplatingPath%=="\Microsoft Shared\TextTemplating\$(VisualStudioVersion)\texttransform.exe" set textTemplatingPath="%CommonProgramFiles%\Microsoft Shared\TextTemplating\$(VisualStudioVersion)\texttransform.exe"
	//
	//		%textTemplatingPath% "$(ProjectDir)AssemblyFileVersion.tt"

    int major = 0; 
    int minor = 0; 	
    int build = 0; 
	int patch = 0;
	bool versionSection = false;

	int i = 0;
	int i2 = 0;
	string s;
	
	//
	// Update the following with the complete path to the .version file
	//
	string versionfile =  @"C:\KSP_DEV\Workspace\OhScrap\OhScrap.version";

	if (!File.Exists(versionfile))
	{
		Write("File: " + versionfile + " missing\n");		
	}

	try
	{
		foreach (var line in File.ReadAllLines(versionfile))
		{
			if (line != null)
			{
				if (!versionSection)
				{
					if (line.Contains("\"VERSION\""))
						versionSection = true;
				}
				else
				{
					if (line.Contains("}"))
							versionSection = false;
					i = line.IndexOf(":");
					i2 = line.IndexOf(",");
					if (i2 == -1)
						i2 = line.Length;
					if (i >= 0 && i2 >= 0)
					{
						s = line.Substring(i + 1, i2 - i - 1);

						if (line.Contains("MAJOR"))			
							Int32.TryParse(s, out major);			
			
						if (line.Contains("MINOR"))			
							Int32.TryParse(s, out minor);
			
						if (line.Contains("PATCH"))			
							Int32.TryParse(s, out patch);
			
						if (line.Contains("BUILD"))			
							Int32.TryParse(s, out build);
					}
				}
			}
		}
         
	}
	catch
	{
		major = 1; 
		minor = 0; 
		patch = 0; 
		build = 0; 
	}
	int revisionNumber;
    try
    {
        //If we cannot find the file, the revision number is set to zero,
        //so even if the file doesn't exists the generation will run anyway.
        //NOTE: we suppose we're not messing with the generated file
        using(var f = File.OpenText(Host.ResolvePath("AssemblyFileVersion.cs")))
        {
            //We're reading the previous revision number; in order to make the
            //code as simple as we can, we're just going to rewrite it on the first row, commented.
            //This is not elegant, but it's simple enough and quite effective.
            string _s = f.ReadLine().Replace("//","");
            revisionNumber = int.Parse(_s) + 1; 
        }
    }catch
    {     
        revisionNumber = 0; 
    }
	 //Write("File done");

 #>
 //<#=revisionNumber#>
 // 
 // This code was generated by a tool. Any changes made manually will be lost
 // the next time this code is regenerated.
 // 
  
 using System.Reflection;

 [assembly: AssemblyFileVersion("<#= major #>.<#= minor #>.<#= patch #>.<#= revisionNumber #>")]
 [assembly: AssemblyVersion("<#= major #>.<#= minor #>.<#= patch #>.<#= build #>")]
